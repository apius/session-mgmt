package org.apius.server.identity.session.client.openam;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apius.messaging.atom.AtomMessageBuilder;
import org.restlet.ext.atom.Entry;
import org.restlet.ext.xml.DomRepresentation;
import org.restlet.ext.xml.SaxRepresentation;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 * 
 * <p>
 * Helper class to handle responses coming back from the <a href="forgerock.com/openam.html">
 * OpenAM</a> session provisioner, authenticator and authorizer application.
 * </p>
 * <p>
 * Methods are not publicized outside of the package since this class is designed solely 
 * to help the <code>SessionProvisionerProxyImpl</code> class to consume responses from the 
 * <a href="forgerock.com/openam.html">OpenAM</a> session provisioner.
 * </p>
 * 
 * @author Paul Morris
 * 
 */
final class ResponseHelper implements ApplicationContextAware{
    
    private AtomMessageBuilder atomMessageBuilder;
    private HashMap<String,List<String>> attributesMapping;
    private DomRepresentation dom;
    private ApplicationContext appCxt;
    
    ResponseHelper(AtomMessageBuilder atomMessageBuilder, 
                   HashMap<String,List<String>> attributesMapping, 
                   DomRepresentation dom) {
        this.atomMessageBuilder = atomMessageBuilder;
        this.attributesMapping = attributesMapping;
        this.dom = dom;
    }
    
    boolean extractBooleanFromResponseString(String responseString) {
        responseString = responseString.replaceFirst("boolean=", "").replaceFirst("\n", "");
    	
    	return Boolean.parseBoolean(responseString);
    }
    
    SaxRepresentation getSessionAttributes(String responseString) throws IOException, SAXException { 
        createAttributeMapping(responseString);
        
        Entry entry = atomMessageBuilder.createEntry();
        entry.setTitle(atomMessageBuilder.createText("OpenAM Session Attributes"));
        Document document = dom.getDocument();
        Element root = document.createElement("session-attributes");
        document.appendChild(root);
        
        for (Map.Entry<String,List<String>> attribute : attributesMapping.entrySet()) {
            Element attributeElmt = null;
            Element valueElmt = null;
            attributeElmt = document.createElement("session-attribute");
            attributeElmt.setAttribute("name", attribute.getKey());
        
            for (String value : attribute.getValue()) {
                valueElmt = document.createElement("value");
                valueElmt.setTextContent(value);
                attributeElmt.appendChild(valueElmt);
            }
            
            root.appendChild(attributeElmt);
        }
        
        entry.setContent(atomMessageBuilder.createContent(dom));
        
        return entry;
    }
    
    private void createAttributeMapping(String responseString) {
        String[] lines = responseString.split("\n");
        String attributeName = null;
        List<String> values = null;
        
        for (String line : lines) {             
            if (line.contains("attribute.name")) {
                values = appCxt.getBean("openAmAttributeValuesList");
                attributeName = extractAttributeNameOrValueFromLine(line);
            } else if (line.contains("attribute.value")) {
                values.add(extractAttributeNameOrValueFromLine(line));
                attributesMapping.put(attributeName, values);
            }
        }
    }
    
    private String extractAttributeNameOrValueFromLine(String line) {
        String[] s = line.split("=");
    	
        return s[1];
    }
    
    String extractUsernameFromSessionAttributes(String responseString) {
        String[] splitBeforeUsername = responseString.split("uid\nuserdetails.attribute.value=");
        String[] splitAfterUsername = splitBeforeUsername[1].split("\n");
        
        return splitAfterUsername[0];
    }

    @Override
    public void setApplicationContext(ApplicationContext appCxt) throws BeansException {
        this.appCxt = appCxt;
    }
	
}
