/**
 * Copyright 2010-2011 apius.org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apius.server.identity.session.server.openam;

import org.apius.server.identity.session.Session;
import org.apius.server.identity.session.SessionCookieSettings;
import org.apius.server.identity.session.client.openam.SessionProvisionerProxy;
import org.apius.server.identity.session.filter.SessionAuthenticator;
import org.restlet.data.ChallengeScheme;
import org.restlet.data.CookieSetting;
import org.restlet.data.Form;
import org.restlet.data.Status;
import org.restlet.ext.xml.SaxRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.ResourceException;
import org.restlet.resource.ServerResource;
import org.restlet.util.Series;

/**
 * <p>
 * Implementation of the <code>Session</code> interface for the <a href="forgerock.com/openam.html">
 * OpenAM</a> session provisioner, authenticator and authorizer application.
 * </p>
 * <p>
 * <b><em>Public API Contract</em></b>
 * </p>
 * <p>
 * <b>POST</b>
 * </p>
 * <p>
 * Looks for the username and password in the request. Two methods of passing those values are 
 * supported. The credentials may be passed in as parameters in the entity body of the request 
 * as in:
 * </p>
 * <p>
 * <code>POST /{service_url}</code>
 * </p><p>
 * <code>username=pmorris&password=secret</code>
 * </p>
 * <p>
 * The credentials may also be sent following the w3 standard for HTTP Basic Authentication, 
 * namely a colon-delimited ("pmorris:secret") and Base64 encoded string pair, as in:
 * </p>
 * <p>
 * <code>Authorization: Basic cG1vcnJpczpzZWNyZXQ=</code>
 * </p>
 * <p>
 * In either case the method extracts the credentials and passes them into the <code>ClientResource
 * </code>object implementing the <code>Session</code> interface to request a session token to be 
 * provisioned.
 * </p>
 * <p>
 * If a token is provisioned, it will be sent back to the client in a cookie along with an HTTP 201
 * status code. The purpose of the cookie is NOT however to be sent along with each request across 
 * the entire scope of the API. Its sole purpose is to serve as a client-side container to store the 
 * session token value. It's the Authorization header that will be checked by the Filter objects 
 * across our API's scope to grant or deny access to resources.
 * </p>
 * <p>
 * The <code>ClientResource</code>object implementing the <code>Session</code> interface is the 
 * session provisioner proxy. Not exposing this proxy object to the public API allows us to 
 * 1) design our own RESTful interface for managing sessions across our API and 2) keep the public 
 * contract consistent even if more than one stateful session provisioner (more than one 
 * implementation of our session interface) is introduced into the scope of the API.
 * </p>
 * <p>
 * <b>GET</b>
 * </p>
 * <p>
 * The token value must be included in the Authorization header of the request as in:
 * </p>
 * <p>
 * <code>Authorization: APIUS token=AQIC5wM2LY4SfcwGgIvSF9oEp5y7rZl[...]</code>
 * </p>
 * <p>
 * If it finds this value then the the OpenAM server is called to return all known attributes and 
 * roles associated with the session represented by the token. The output string is converted to
 * an Atom feed for easier parsing client side.
 * </p>
 * <p>
 * <b>PUT</b>
 * </p>
 * <p>
 * The token value must be included in the Authorization header of the request as in:
 * </p>
 * <p>
 * <code>Authorization: APIUS token=AQIC5wM2LY4SfcwGgIvSF9oEp5y7rZl[...]</code>
 * </p>
 * <p>
 * If it finds this value then the user is requesting for the session to be refreshed and/or for
 * the token representing a session to be validated.
 * </p>
 * <p>
 * <b>DELETE</b>
 * </p>
 * <p>
 * Invalidates the session represented by the token passed in as a parameter, effectively logging 
 * out the user. The token value must be included in the Authorization header of the request 
 * as in:
 * </p>
 * <p>
 * <code>Authorization: APIUS token=AQIC5wM2LY4SfcwGgIvSF9oEp5[...]</code>
 * </p>
 * 
 * @author Paul Morris
 * 
 */
public final class SessionImpl extends ServerResource implements Session {
	
    private SessionProvisionerProxy sessionProvisionerProxy;
    private SessionAuthenticator sessionAuthenticator;
    private ResponseHelper responseHelper;
    private CookieSetting cookieSetting;
    
    /**
     * Constructor
     * 
     * @param sessionProvisionerProxy
     * @param sessionAuthenticator
     * @param responseHelper
     * @param cookieSetting
     */
    public SessionImpl(Session sessionProvisionerProxy, 
                       SessionAuthenticator sessionAuthenticator,
                       ResponseHelper responseHelper,
                       CookieSetting cookieSetting) {
        this.sessionProvisionerProxy = (SessionProvisionerProxy) sessionProvisionerProxy;
        this.sessionAuthenticator = sessionAuthenticator;
        this.responseHelper = responseHelper;
        this.cookieSetting = cookieSetting;
    }

    /**
     * POST operation used to request the session provisioner to create a session
     * and return a token representing that session to the client.
     * 
     * @param Form with identifier/secret parameters
     * @return Representation of the newly created session
     */
    public Representation createSession(Form form) {
        Representation representation = null;

        if (requestHasCredentialsAsParameters(form)) {
            representation = handleCreateSession(form);
        } else if (requestHasCredentialsInAuthHeader()){
        	form.add("username", getChallengeResponse().getIdentifier());
        	form.add("password", new String(getChallengeResponse().getSecret()));
        	representation = handleCreateSession(form);
        } else {
            setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        }
        
        return representation;
    }
    
    private boolean requestHasCredentialsAsParameters(Form form) {
    	return form.getFirst("username") != null && form.getFirst("password") != null ? true : false;
    }
    
    private boolean requestHasCredentialsInAuthHeader() {
        return (getChallengeResponse() != null && getChallengeResponse().getScheme().equals(ChallengeScheme.HTTP_BASIC)) ? true : false;
    }
    
    private Representation handleCreateSession(Form form) {
        SaxRepresentation representation = null;
        String token = "";
        
        try {
            token = sessionProvisionerProxy.createSession(form).getText();
            
            if (!token.isEmpty()) {
                setStatus(Status.SUCCESS_CREATED);
                setLocationRef(getReference());
                representation = responseHelper.writeCreateSessionEntry(token, getReference().toString());
                addCookieSetting(token);     
            }	
        } catch (ResourceException e) {
            handleResourceException(e);
        } catch (Exception e) {
            handleException(e);
        }	
        
        return representation;
    }
    
    private void addCookieSetting(String token) {
        cookieSetting.setVersion(SessionCookieSettings.version);
        cookieSetting.setName(SessionCookieSettings.name);
        cookieSetting.setValue("token=" + token);
        cookieSetting.setPath(getOriginalRef().getPath());
        cookieSetting.setComment(SessionCookieSettings.comment);
        cookieSetting.setMaxAge(SessionCookieSettings.maxAge);
        cookieSetting.setSecure(SessionCookieSettings.secure);
        cookieSetting.setAccessRestricted(SessionCookieSettings.accessRestricted);
        
        Series<CookieSetting> cookieSettings = this.getCookieSettings();
        cookieSettings.clear();
        cookieSettings.add(cookieSetting);
        this.setCookieSettings(cookieSettings);
    }
    
    /**
     * GET operation responds with all known attributes and roles associated with the OpenAM
     * session represented by the token.
     * 
     * @param token
     * @return Representation of session attributes
     */
    public Representation getAttributes(String token) {
        Representation representation = null;

        if (getChallengeResponse() != null) {
        	token = getChallengeResponse().getRawValue();
            representation = getAttributesRepresentation(token);
        } else {
            setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        }
        
        return representation;
    }
    
    private Representation getAttributesRepresentation(String token) {
    	Representation representation = null;
    	
    	try {
    	    representation = sessionProvisionerProxy.getAttributes(token);
    	} catch (ResourceException e) {
    	    handleResourceException(e);
    	} catch (Exception e) {
    	    handleException(e);
    	}
    	
    	return representation;
    }
    
    /**
     * PUT operation verifies that the session associated with the token is valid but
     * also refreshes the time left before OpenAM imposes an inactive timeout.
     * 
     * @param token
     * @return void
     */
    public void validateSessionToken(String token) {
        if (getChallengeResponse() != null) {
            try {
            	token = getChallengeResponse().getRawValue();
                sessionProvisionerProxy.validateSessionToken(token);
            } catch (ResourceException e) {
                handleResourceException(e);
            } catch (Exception e) {
                handleException(e);
            }	
        } else {
            setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        }
    }
    
    /**
     * DELETE operation to invalidate the session and effectively log out the
     * user.
     * 
     * @param token
     * @return void
     */
    public void logout(String token) {
        if (getChallengeResponse() != null) {
            try {
            	token = getChallengeResponse().getRawValue();
                sessionProvisionerProxy.logout(token);
            } catch (ResourceException e) {
                handleResourceException(e);
            } catch (Exception e) {
                handleException(e);
            }	
        } else {
            setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        }
    }
    
    /**
     * Convenience method for internal API.
     * 
     * @param token
     * @return boolean indicating whether session represented by the token is valid
     */
	public boolean isAuthenticated(String token) {
		return sessionProvisionerProxy.isAuthenticated(token);
	}
	
	/**
     * Convenience method for internal API.
     * 
     * @param token
     * @param uri
     * @param method
     * @return boolean indicating whether session represented by the token is valid
     */
	public boolean isAuthorized(String token, String uri, String method) {
		return sessionProvisionerProxy.isAuthorized(uri, method, token);
	}
	
    private void handleResourceException(ResourceException e) {
        if (e.getStatus().equals(Status.CLIENT_ERROR_UNAUTHORIZED)) {
            sessionAuthenticator.challenge(getResponse(), false);
        } else {
            setStatus(e.getStatus(), e.getMessage());
        }
    }
    
    private void handleException(Exception e) {
        setStatus(Status.SERVER_ERROR_INTERNAL, e.getMessage());
    }
    
}
