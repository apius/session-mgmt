/**
 * Copyright 2010-2011 apius.org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apius.server.identity.session;

import org.restlet.data.Form;
import org.restlet.representation.Representation;
import org.restlet.resource.Delete;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.restlet.resource.Put;

/**
 * <p>
 * Different session provisioners will have different interface contracts but 
 * APIUS encourages the use of a proxy implementation to sit behind this 
 * <code>Session</code> interface.
 * </p>
 * <p>
 * The object implementing the <code>SessionProxyProvisioner</code> interface 
 * is the session provisioner mediator. Not exposing this proxy object to the 
 * public API allows us to 1) design a consistent RESTful interface for managing 
 * sessions across our API and 2) keep the public contract consistent even if 
 * more than one stateful session provisioner (more than one implementation of
 * our session interface) is introduced into the scope of the API.
 * </p>
 * 
 * @author Paul Morris
 * 
 */
public interface Session {
    
	/**
     * Requests the session provisioner to create a session on behalf of the 
     * user whose credentials have been passed in the request. Accepts an
     * identifier/secret (i.e. username/password) pair as query parameters 
     * or encoded as an HTTP Basic Authentication string.
     * 
     * @param Form with identifier/secret parameters
     * @return Representation of the newly created session
     */
    @Post
    abstract Representation createSession(Form form);
	
	/**
     * Requests session provisioner to respond with attributes associated with
     * the session represented by the token.
     * 
     * @return Representation of the session attributes
     */
	@Get
    abstract Representation getAttributes();
	
    /**
     * <p>
     * This call authenticates the user represented by the session by validating 
     * the session token in the Authorization header. The call may also be used 
     * to refresh the session represented by the token. An "OK" HTTP response (200) 
     * indicates validation and the <code>Date</code> response header can be used 
     * by the client as the time when the session was refreshed.
     * </p>
     * <p>
     * The <code>ClientResource</code> object implementing the <code>Session</code> 
     * interface and representing the session provisioner should set the <code>
     * authenticated</code> property of its <code>ClientInfo</code> object to 
     * <code>true</code> and the <code>ServerResource</code> implementation should 
     * match this property in its own <code>ClientInfo</code> object once the call 
     * returns successfully. Attributes associated with the session (i.e. user identifier, 
     * etc.) can be retrieved in the course of this method call and used to construct a 
     * <code>User</code> object which can then be attached to the <code>ClientInfo</code> 
     * of the session provisioner <code>ClientResource</code> and, in turn, copied and 
     * attached to the <code>ClientInfo</code> of the <code>ServerResource</code> 
     * implementing the <code>Session</code> interface.
     * </p>
     * 
     * @return void
     */
    @Put
    abstract void authenticateToken();
	
    /**
     * This call invalidates the session represented by the token in the 
     * Authorization header, essentially logging out the user.
     * 
     * @return void
     */
    @Delete
    abstract void logout();
    
    /**
     * To determine whether the authenticated user represented by the session token
     * is authorized to perform the given HTTP method on the resource at the given URI.
     * 
     * @param token
     * @param uri
     * @param method
     * @return boolean indicating whether the session represented by the token is
     * 		   authorized to perform the given method on the resource at the uri 
     */
    abstract boolean isAuthorized(String token, String uri, String method);
    
    /**
     * Used by the session provisioner proxy. This method allows the <code>ServerResource
     * </code> to extract the token value from the <code>Request</code> and cleanly set
     * the token value of the session provisioner proxy.
     * 
     * @param token
     */
    abstract void setToken(String token);
    
}
