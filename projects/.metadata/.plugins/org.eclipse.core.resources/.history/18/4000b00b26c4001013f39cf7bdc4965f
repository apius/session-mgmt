/**
 * Copyright 2010-2011 apius.org
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apius.server.identity.session.client.openam;

import java.io.IOException;

import org.apius.server.identity.session.Session;
import org.apius.server.identity.session.SessionCookieSettings;
import org.apius.server.identity.session.filter.SessionAuthenticator;
import org.apius.server.identity.session.server.openam.ResponseHelper;
import org.restlet.data.ChallengeScheme;
import org.restlet.data.CookieSetting;
import org.restlet.data.Form;
import org.restlet.data.Status;
import org.restlet.ext.xml.SaxRepresentation;
import org.restlet.representation.Representation;
import org.restlet.representation.StringRepresentation;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;
import org.restlet.util.Series;

/**
 * <p>
 * Implementation of the <code>SessionProvisionerProxy</code> interface for the 
 * <a href="forgerock.com/openam.html">OpenAM</a> session provisioner, authenticator 
 * and authorizer application.
 * </p>
 * 
 * @author Paul Morris
 * 
 */
public final class SessionProvisionerProxy extends ClientResource implements Session {
	
	private SessionAuthenticator sessionAuthenticator;
    private ResponseHelper responseHelper;
    private CookieSetting cookieSetting;
    
    /**
     * Constructor
     * 
     * @param baseUri
     * @param responseHelper
     */
    public SessionProvisionerProxy(String baseUri, ResponseHelper responseHelper) {
        super(baseUri);
        this.responseHelper = responseHelper;
    }
    
    /**
     * POST operation used to request the session provisioner to create a session
     * and return a token representing that session to the client.
     * 
     * @return Representation of the newly created session
     */
    public Representation createSession(Representation entity) {
        Representation representation = null;
        Form form = new Form(entity);

        if (requestHasCredentialsAsParameters(form)) {
            representation = handleCreateSession(form);
        } else if (requestHasCredentialsInAuthHeader()){
        	form.add("username", getChallengeResponse().getIdentifier());
        	form.add("password", new String(getChallengeResponse().getSecret()));
        	representation = handleCreateSession(form);
        } else {
            getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
        }
        
        return representation;
    }
    
    private boolean requestHasCredentialsAsParameters(Form form) {
    	return form.getFirst("username") != null && form.getFirst("password") != null ? true : false;
    }
    
    private boolean requestHasCredentialsInAuthHeader() {
        return (getChallengeResponse() != null && getChallengeResponse().getScheme().equals(ChallengeScheme.HTTP_BASIC)) ? true : false;
    }
    
    private Representation handleCreateSession(Form form) {
        SaxRepresentation representation = null;
        String token = "";
        
        try {
            token = createSessionOnOpenAm(form).getText().replaceFirst("token.id=", "");
            
            if (!token.isEmpty()) {
                getResponse().setStatus(Status.SUCCESS_CREATED);
                getResponse().setLocationRef(getReference());
                representation = responseHelper.writeCreateSessionEntry(token, getReference().toString());
                addCookieSetting(token);     
            }	
        } catch (ResourceException e) {
            handleResourceException(e);
        } catch (Exception e) {
            handleException(e.getMessage());
        }	
        
        return representation;
    }
    
    /**
     * Request OpenAM to create session and return token representing that session.
     * 
     * @param username
     * @param password
     * @return StringRepresentation containing the token
     */
    private Representation createSessionOnOpenAm(Form form) {
    	Representation representation = null;
    	
        setReference(getReference().
                addSegment("identity").
                addSegment("authenticate"));
    
        // DO NOT call this service with a GET and query parameters. Elevating this to a POST
        // will prevent OpenAM from logging the sensitive username and password parameters.
        //
        // http://blogs.sun.com/docteger/entry/opensso_entitlements_service_rest_interfaces
        try {
			representation = new StringRepresentation(this.post(form).getText());
		} catch (ResourceException e) {
			handleResourceException(e);
		} catch (IOException e) {
			handleException(e.getMessage());
		}
		
		return representation;
    }
    
    private void addCookieSetting(String token) {
        cookieSetting.setVersion(SessionCookieSettings.version);
        cookieSetting.setName(SessionCookieSettings.name);
        cookieSetting.setValue("token=" + token);
        cookieSetting.setPath(getOriginalRef().getPath());
        cookieSetting.setComment(SessionCookieSettings.comment);
        cookieSetting.setMaxAge(SessionCookieSettings.maxAge);
        cookieSetting.setSecure(SessionCookieSettings.secure);
        cookieSetting.setAccessRestricted(SessionCookieSettings.accessRestricted);
        
        Series<CookieSetting> cookieSettings = this.getCookieSettings();
        cookieSettings.clear();
        cookieSettings.add(cookieSetting);
        this.setCookieSettings(cookieSettings);
    }
	
    private void handleResourceException(ResourceException e) {
    	// If the user passes in an invalid session token to the logout service, 
        // OpenAM returns a 500. The APIUS framework prefers to send back a 401 
        // since the reality is that the user is trying to access a resource with 
        // an unauthorized credential. So we check the entity for "Invalid session 
        // ID" and if we find it we change the status code to 401 before throwing 
        // the exception back to our Session resource.
        if (getResponse().getEntityAsText().contains("Invalid session ID")) {
            e = new ResourceException(Status.CLIENT_ERROR_UNAUTHORIZED);
        }
        
        throw e;
    }
    
    private void handleException(String message) {
    	handleResourceException(new ResourceException(Status.SERVER_ERROR_INTERNAL, message));
    }

	@Override
	public Representation getAttributes(String token) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void validateSessionToken(String token) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void logout(String token) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isAuthenticated(String token) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isAuthorized(String token, String uri, String method) {
		// TODO Auto-generated method stub
		return false;
	}
    
}