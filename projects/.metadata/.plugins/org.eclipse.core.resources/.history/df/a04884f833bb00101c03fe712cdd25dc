package org.apius.server.identity.session.server.openam;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apius.messaging.atom.AtomMessageBuilder;
import org.restlet.ext.atom.Entry;
import org.restlet.ext.atom.Link;
import org.restlet.ext.atom.Relation;
import org.restlet.ext.xml.DomRepresentation;
import org.restlet.ext.xml.SaxRepresentation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

final class ResponseBuilder {

    private AtomMessageBuilder atomMessageBuilder;
    
    ResponseBuilder(AtomMessageBuilder atomMessageBuilder) {
        this.atomMessageBuilder = atomMessageBuilder;
    }
    
    SaxRepresentation writeCreateSessionXml(String token) throws IOException {
        Entry entry = atomMessageBuilder.createEntry();
        Link link = 
            atomMessageBuilder.createLink("openam-session-attributes", "/identity/session/attributes", Relation.RELATED);
        entry.setTitle(atomMessageBuilder.createText("openam-session"));
        entry.setId(token);
        entry.getLinks().add(link);
        
        return entry;
    }
    
    SaxRepresentation writeSessionAttributesXml(HashMap<String,List<String>> attributesMapping) throws IOException, 
                                                                                                       SAXException { 
        Entry entry = atomMessageBuilder.createEntry();
        entry.setTitle(atomMessageBuilder.createText("OpenAM Session Attributes"));
        DomRepresentation dom = new DomRepresentation();
        Document document = dom.getDocument();
        
        for (Map.Entry<String,List<String>> attribute : attributesMapping.entrySet()) {
            Element attributeElmt = null;
            Element valueElmt = null;
            attributeElmt = document.createElement("session-attribute");
            attributeElmt.setAttribute("name", attribute.getKey());
            
            for (String value : attribute.getValue()) {
                valueElmt = document.createElement("value");
                valueElmt.setNodeValue(value);
                attributeElmt.appendChild(valueElmt);
            }
        }
        
        entry.setContent(atomMessageBuilder.createContent(dom));
        
        return entry;
    }
}
